# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        env:
          APP_DEBUG: ${{ secrets.APP_DEBUG }}
          APP_ENV: ${{ secrets.APP_ENV }}
          APP_NAME: ${{ secrets.APP_NAME }}
          APP_PROD_ROOT: ${{ secrets.APP_PROD_ROOT }}
          APP_URL: ${{ secrets.APP_URL }}
          BROADCAST_DRIVER: ${{ secrets.BROADCAST_DRIVER }}
          CACHE_DRIVER: ${{ secrets.CACHE_DRIVER }}
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          QUEUE_CONNECTION: ${{ secrets.QUEUE_CONNECTION }}
          SESSION_DRIVER: ${{ secrets.SESSION_DRIVER }}
          SESSION_LIFETIME: ${{ secrets.SESSION_LIFETIME }}
          SSH_PROD_HOST: ${{ secrets.SSH_PROD__HOST }}
          SSH_PROD_USER: ${{ secrets.SSH_PROD_USER }}
        run: 
          composer install --no-dev
          npm install --production=true
          npm run prod
          touch .env
          echo "APP_NAME=\"$APP_NAME\"" >> .env
          echo "APP_ENV=$APP_ENV" >> .env
          echo "APP_KEY=$(php artisan key:generate --show)" >> .env
          echo "APP_DEBUG=$APP_DEBUG" >> .env
          echo "APP_URL=$APP_URL" >> .env
          echo "DB_CONNECTION=$DB_CONNECTION" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_DATABASE=$DB_DATABASE" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "CACHE_DRIVER=$CACHE_DRIVER" >> .env
          echo "LOG_CHANNEL=$LOG_CHANNEL" >> .env
          echo "LOG_LEVEL=$LOG_LEVEL" >> .env
          echo "SESSION_DRIVER=$SESSION_DRIVER" >> .env
          echo "SESSION_LIFETIME=$SESSION_LIFETIME" >> .env
          echo "QUEUE_DRIVER=$QUEUE_DRIVER" >> .env
          touch release.tar.gz
          tar -czf release.tar.gz . --exclude=./release.tar.gz
          scp release.tar.gz $SSH_PROD_USER@$SSH_PROD_HOST:/home/$SSH_DEV_USER
          ssh $SSH_PROD_USER@$SSH_PROD_HOST "tar -xf release.tar.gz -C $APP_PROD_ROOT && rm release.tar.gz"
          echo Add other actions to build,
          echo test, and deploy your project.
